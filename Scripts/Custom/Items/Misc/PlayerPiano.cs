/////////////////////////////////////////////////
//
// Automatically generated by the
// AddonGenerator script by Arya
//
/////////////////////////////////////////////////
//                                             //
// Gump & Keyboard Layout Designed by Moroth   //
// //    http://www.ultimanetwork.com     //   //
//                                             //
/////////////////////////////////////////////////

using System;
using System.Collections;
using Server;
using Server.Items;
using Server.Network;
using Server.Mobiles;
using Server.Gumps;

namespace Server.Items
{
    public class PianoAddon : BaseAddon
    {
        public override BaseAddonDeed Deed
        {
            get
            {
                return new PianoAddonDeed();
            }
        }

        [Constructable]
        public PianoAddon()
        {
            AddonComponent ac = null;
            ac = new

AddonComponent(2928);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, -1, 1, 2);

            ac = new AddonComponent(5981);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, -1, 1, 6);

            ac = new AddonComponent(5984);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, -1, 1, 8);

            ac = new AddonComponent(5981);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, -1, 1, 7);

            ac = new AddonComponent(5985);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, -1, 1, 9);

            ac = new AddonComponent(5431);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, -1, 1, 10);

            ac = new AddonComponent(7933);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, -1, 1, 7);

            ac = new AddonComponent(2480);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, -1, 1, 11);

            ac = new AddonComponent(7883);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, -1, 0, 1);

            ac = new AddonComponent(2480);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, -1, -1, 2);

            ac = new AddonComponent(2924);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, -1, 0);

            ac = new AddonComponent(2925);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 0, 0);

            ac = new AddonComponent(4006);
            ac.Name = "Piano Keys";
            AddComponent(ac, 0, 0, 7);

            ac = new AddonComponent(5981);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 0, 10);

            ac = new AddonComponent(7933);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 0, 9);

            ac = new AddonComponent(5991);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 0, 9);

            ac = new AddonComponent(5988);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 0, 10);

            ac = new AddonComponent(5987);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 0, 8);

            ac = new AddonComponent(5988);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 0, 9);

            ac = new AddonComponent(2252);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 0, 11);

            ac = new AddonComponent(2923);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 1, 0);

            ac = new AddonComponent(2845);
            ac.Light = LightType.Circle225;
            ac.Name = "A Candelabra";
            AddComponent(ac, 0, 1, 17);

            ac = new AddonComponent(4006);
            ac.Name = "Piano Keys";
            AddComponent(ac, 0, 1, 7);

            ac = new AddonComponent(7031);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 1, 12);

            ac = new AddonComponent(7933);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 1, 14);

            ac = new AddonComponent(5986);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 1, 14);

            ac = new AddonComponent(5986);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 1, 12);

            ac = new AddonComponent(5991);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 1, 8);

            ac = new AddonComponent(5987);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 1, 9);

            ac = new AddonComponent(5985);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 0, 1, 10);

            ac = new AddonComponent(3774);
            ac.Name = "Sheet Music";
            AddComponent(ac, 1, 1, 15);

            ac = new AddonComponent(3772);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 1, 1, 12);

            ac = new AddonComponent(1114);
            ac.Hue = 1;
            ac.Name = "Piano";
            AddComponent(ac, 1, 0, 0);
        }

        public PianoAddon(Serial serial)
            : base(serial)
        {
        }

        public override void OnComponentUsed(AddonComponent ac, Mobile from)
        {
            if (!from.InRange(GetWorldLocation(), 1))
                from.SendMessage("You are too far away to use that!");

            else
            {
                if (ac.ItemID == 3774)
                {
                    from.SendGump(new PianoGump());
                }
                else
                    return;
            }
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write(0); // Version
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }

    }

    public class PianoAddonDeed : BaseAddonDeed
    {
        public override BaseAddon Addon
        {
            get
            {
                return new PianoAddon();
            }
        }

        [Constructable]
        public PianoAddonDeed()
        {
            Name = "Piano";
        }

        public PianoAddonDeed(Serial serial)
            : base(serial)
        {
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write(0); // Version
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }
}

namespace Server.Gumps
{
    public class PianoGump : Gump
    {
        public PianoGump()
            : base(0, 0)
        {

            this.Closable = true;
            this.Disposable = true;
            this.Dragable = true;
            this.Resizable = false;

            AddPage(0);
            AddBackground(204, 153, 394, 73, 9200);
            AddBackground(251, 155, 299, 70, 9270);
            AddButton(261, 187, 11374, 11374, 1, GumpButtonType.Reply, 0);
            AddButton(281, 187, 11374, 11374, 2, GumpButtonType.Reply, 0);
            AddButton(301, 187, 11374, 11374, 3, GumpButtonType.Reply, 0);
            AddButton(321, 187, 11374, 11374, 4, GumpButtonType.Reply, 0);
            AddButton(341, 187, 11374, 11374, 5, GumpButtonType.Reply, 0);
            AddButton(361, 187, 11374, 11374, 6, GumpButtonType.Reply, 0);
            AddButton(381, 187, 11374, 11374, 7, GumpButtonType.Reply, 0);
            AddButton(401, 187, 11374, 11374, 8, GumpButtonType.Reply, 0);
            AddButton(421, 187, 11374, 11374, 9, GumpButtonType.Reply, 0);
            AddButton(441, 187, 11374, 11374, 10, GumpButtonType.Reply, 0);
            AddButton(461, 187, 11374, 11374, 11, GumpButtonType.Reply, 0);
            AddButton(481, 187, 11374, 11374, 12, GumpButtonType.Reply, 0);
            AddButton(521, 187, 11374, 11374, 14, GumpButtonType.Reply, 0);
            AddButton(501, 187, 11374, 11374, 13, GumpButtonType.Reply, 0);
            AddImageTiled(261, 162, 280, 26, 11374);
            AddButton(274, 162, 10720, 10720, 20, GumpButtonType.Reply, 0);
            AddButton(294, 162, 10720, 10720, 21, GumpButtonType.Reply, 0);
            AddButton(334, 162, 10720, 10720, 22, GumpButtonType.Reply, 0);
            AddButton(354, 162, 10720, 10720, 23, GumpButtonType.Reply, 0);
            AddButton(374, 162, 10720, 10720, 24, GumpButtonType.Reply, 0);
            AddButton(414, 162, 10720, 10720, 25, GumpButtonType.Reply, 0);
            AddButton(434, 162, 10720, 10720, 26, GumpButtonType.Reply, 0);
            AddButton(474, 162, 10720, 10720, 27, GumpButtonType.Reply, 0);
            AddButton(494, 162, 10720, 10720, 28, GumpButtonType.Reply, 0);
            AddButton(514, 162, 10720, 10720, 29, GumpButtonType.Reply, 0);
            AddImage(208, 163, 10450);
            AddImage(555, 163, 10450);

        }

        public override void OnResponse(NetState sender, RelayInfo info)
        {
            Mobile m = sender.Mobile;

            if (m == null)
                return;

            switch (info.ButtonID)
            {
                case 0: { m.SendMessage(60, "You stop playing."); break; }

                case 1: { m.PlaySound(1028); m.SendGump(new PianoGump()); break; }
                case 2: { m.PlaySound(1033); m.SendGump(new PianoGump()); break; }
                case 3: { m.PlaySound(1038); m.SendGump(new PianoGump()); break; }
                case 4: { m.PlaySound(1040); m.SendGump(new PianoGump()); break; }
                case 5: { m.PlaySound(1044); m.SendGump(new PianoGump()); break; }
                case 6: { m.PlaySound(1021); m.SendGump(new PianoGump()); break; }
                case 7: { m.PlaySound(1025); m.SendGump(new PianoGump()); break; }
                case 8: { m.PlaySound(1029); m.SendGump(new PianoGump()); break; }
                case 9: { m.PlaySound(1034); m.SendGump(new PianoGump()); break; }
                case 10: { m.PlaySound(1039); m.SendGump(new PianoGump()); break; }
                case 11: { m.PlaySound(1041); m.SendGump(new PianoGump()); break; }
                case 12: { m.PlaySound(1045); m.SendGump(new PianoGump()); break; }
                case 13: { m.PlaySound(1022); m.SendGump(new PianoGump()); break; }
                case 14: { m.PlaySound(1026); m.SendGump(new PianoGump()); break; }

                case 20: { m.PlaySound(1031); m.SendGump(new PianoGump()); break; } //CS1
                case 21: { m.PlaySound(1036); m.SendGump(new PianoGump()); break; } //DS1
                case 22: { m.PlaySound(1042); m.SendGump(new PianoGump()); break; } //FS1
                case 23: { m.PlaySound(1046); m.SendGump(new PianoGump()); break; } //GS1
                case 24: { m.PlaySound(1023); m.SendGump(new PianoGump()); break; } //AS1
                case 25: { m.PlaySound(1032); m.SendGump(new PianoGump()); break; } //CS2
                case 26: { m.PlaySound(1037); m.SendGump(new PianoGump()); break; }	//DS2
                case 27: { m.PlaySound(1043); m.SendGump(new PianoGump()); break; }	//FS2
                case 28: { m.PlaySound(1047); m.SendGump(new PianoGump()); break; }	//GS2							
                case 29: { m.PlaySound(1024); m.SendGump(new PianoGump()); break; } //AS2
            }
        }
    }
}
